package org.andrewliu.java7thread.java7synch;

/**
 * 用非依赖属性实现同步（即用锁定某个对象的形式（非this)，来访问临界区，同一时刻，只有
 * 一个线程能访问synchronized(obj)中的代码，此处的obj是非当前对象(非this)，比如有时我们为了保证同一时刻只能有一个两种
 * 操作一个List对象时，就是以synchronized(list)｛｝来锁定，那么不管有多少线程操作这个list,都不会出现list状态不一致。
 * 这里模拟多窗口卖电影票，以保证票不会多卖（出售超过现有的票）的情况。
 * @author de
 *
 */
public class SaleCinemaTickets_2_3 {

	public static void main(String[] args) {
		Cinema cinema = new Cinema();  //电影院
		TicketOffice1 ticketOffice1 = new TicketOffice1(cinema);//售票窗口1
		Thread thread1 = new Thread(ticketOffice1,"TickeOffice1"); //用线程启动卖票
		
		TicketOffice2 ticketOffice2 = new TicketOffice2(cinema);//售票窗口2
		Thread thread2 = new Thread(ticketOffice2,"TicketOffice2");//用线程启动卖票
		
		thread1.start();
		thread2.start();
		
		
		try{
			thread1.join(); //让他们卖完
			thread2.join(); //让他们卖完
		}catch(InterruptedException e){
			e.printStackTrace();
		}
		
		System.out.printf("Room 1 Vacancies: %d\n", cinema.getVacanciesCinema1());
		System.out.printf("Room 2 Vacancies: %d\n", cinema.getVacanciesCinema2());
		
	}
}

class Cinema{
	//电影票
	private long vacanciesCinema1;
	private long vacanciesCinema2;
	//控制对象（用来保证同一时刻只有一个线程能更新电影票数)
	private final Object  controlCinema1,controlCinema2;
	
	public Cinema(){
		controlCinema1 = new Object();
		controlCinema2 = new Object();
		vacanciesCinema1 = 20;
		vacanciesCinema2 = 20;
	}
	
	public boolean sellTickets1(int number){
		synchronized(controlCinema1){ //锁住这个对象，其它线程就不能锁，那么就不会出现竞抢更新电影票的情况
			if(number<vacanciesCinema1){
				vacanciesCinema1-=number;
				return true;
			}else{
				return false;
			}
		}
	}
	
	public boolean sellTickets2(int number){
		synchronized(controlCinema2){  //锁住这个对象，其它线程就不能锁，那么就不会出现竞抢更新电影票的情况
			if(number<vacanciesCinema2){
				vacanciesCinema2-=number;
				return true;
			}else{
				return false;
			}
		}
	}
	
	public boolean returnTickets1(int number){
		synchronized(controlCinema1){//锁定对象，以访问其它线程也来退票
			vacanciesCinema1+=number;
			return true;
		}
	}
	
	
	public boolean returnTickets2 (int number){
		synchronized(controlCinema2){  //锁定对象，以访问其它线程也来退票
			vacanciesCinema2+=number;
			return true;
		}
	}

	public long getVacanciesCinema1() {
		return vacanciesCinema1;
	}

	public long getVacanciesCinema2() {
		return vacanciesCinema2;
	}
	
}

/**
 * 售票窗口1
 * @author de
 *
 */
class TicketOffice1 implements Runnable{
	private Cinema cinema;
	public TicketOffice1 (Cinema cinema){
		this.cinema = cinema;
	}
	@Override
	public void run() {
		cinema.sellTickets1(3);
		cinema.sellTickets1(2);
		
		cinema.sellTickets2(2);
		
		cinema.returnTickets1(3);
		cinema.sellTickets1(5);
		
		cinema.sellTickets2(2);
		cinema.sellTickets2(2);
		cinema.sellTickets2(2);
	}
	
}

/**
 * 售票窗口2
 * @author de
 *
 */
class TicketOffice2 implements Runnable{
	private Cinema cinema;
	public TicketOffice2(Cinema cinema){
		this.cinema = cinema;
	}
	@Override
	public void run() {
		cinema.sellTickets2(2);
		cinema.sellTickets2(4);
		
		cinema.sellTickets1(2);
		cinema.sellTickets1(1);
		
		cinema.returnTickets2(2);
		
		cinema.sellTickets1(3);
		
		cinema.sellTickets2(2);
		
		cinema.sellTickets1(2);
	}
	
	
}
